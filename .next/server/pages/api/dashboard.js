"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/dashboard";
exports.ids = ["pages/api/dashboard"];
exports.modules = {

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fdashboard&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fdashboard.ts&middlewareConfigBase64=e30%3D!":
/*!************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fdashboard&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fdashboard.ts&middlewareConfigBase64=e30%3D! ***!
  \************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_dashboard_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages/api/dashboard.ts */ \"(api)/./pages/api/dashboard.ts\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_dashboard_ts__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_dashboard_ts__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/dashboard\",\n        pathname: \"/api/dashboard\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_dashboard_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRmRhc2hib2FyZCZwcmVmZXJyZWRSZWdpb249JmFic29sdXRlUGFnZVBhdGg9LiUyRnBhZ2VzJTJGYXBpJTJGZGFzaGJvYXJkLnRzJm1pZGRsZXdhcmVDb25maWdCYXNlNjQ9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNMO0FBQzFEO0FBQ3FEO0FBQ3JEO0FBQ0EsaUVBQWUsd0VBQUssQ0FBQyxvREFBUSxZQUFZLEVBQUM7QUFDMUM7QUFDTyxlQUFlLHdFQUFLLENBQUMsb0RBQVE7QUFDcEM7QUFDTyx3QkFBd0IsZ0hBQW1CO0FBQ2xEO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLFlBQVk7QUFDWixDQUFDOztBQUVEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb3BzaW50ZWwtYWktZGFzaGJvYXJkLz84ZTdmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhZ2VzQVBJUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9wYWdlcy1hcGkvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgaG9pc3QgfSBmcm9tIFwibmV4dC9kaXN0L2J1aWxkL3RlbXBsYXRlcy9oZWxwZXJzXCI7XG4vLyBJbXBvcnQgdGhlIHVzZXJsYW5kIGNvZGUuXG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiLi9wYWdlcy9hcGkvZGFzaGJvYXJkLnRzXCI7XG4vLyBSZS1leHBvcnQgdGhlIGhhbmRsZXIgKHNob3VsZCBiZSB0aGUgZGVmYXVsdCBleHBvcnQpLlxuZXhwb3J0IGRlZmF1bHQgaG9pc3QodXNlcmxhbmQsIFwiZGVmYXVsdFwiKTtcbi8vIFJlLWV4cG9ydCBjb25maWcuXG5leHBvcnQgY29uc3QgY29uZmlnID0gaG9pc3QodXNlcmxhbmQsIFwiY29uZmlnXCIpO1xuLy8gQ3JlYXRlIGFuZCBleHBvcnQgdGhlIHJvdXRlIG1vZHVsZSB0aGF0IHdpbGwgYmUgY29uc3VtZWQuXG5leHBvcnQgY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgUGFnZXNBUElSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuUEFHRVNfQVBJLFxuICAgICAgICBwYWdlOiBcIi9hcGkvZGFzaGJvYXJkXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvZGFzaGJvYXJkXCIsXG4gICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgYXJlbid0IHVzZWQgaW4gcHJvZHVjdGlvbi5cbiAgICAgICAgYnVuZGxlUGF0aDogXCJcIixcbiAgICAgICAgZmlsZW5hbWU6IFwiXCJcbiAgICB9LFxuICAgIHVzZXJsYW5kXG59KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFnZXMtYXBpLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fdashboard&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fdashboard.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./pages/api/dashboard.ts":
/*!********************************!*\
  !*** ./pages/api/dashboard.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _src_lib_fetchFred__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../src/lib/fetchFred */ \"(api)/./src/lib/fetchFred.ts\");\n/* harmony import */ var _src_lib_fetchEia__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../src/lib/fetchEia */ \"(api)/./src/lib/fetchEia.ts\");\n/* harmony import */ var _src_lib_fetchWeather__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../src/lib/fetchWeather */ \"(api)/./src/lib/fetchWeather.ts\");\n/* harmony import */ var _src_lib_fetchInsight__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../src/lib/fetchInsight */ \"(api)/./src/lib/fetchInsight.ts\");\n/**\n * Dashboard API Endpoint - Data Flow and Module Responsibilities\n * \n * PURPOSE: Serves aggregated dashboard data with caching and insights for the client application\n * \n * MODULE RESPONSIBILITIES:\n * - Data Fetch Module: Retrieves raw data from external APIs, databases, or services\n *   • fetchFred.ts: FRED API for Industrial Production Index with MoM trends\n *   • fetchEia.ts: EIA API for Texas electricity pricing with trend analysis\n *   • fetchWeather.ts: OpenWeatherMap API for El Paso weather and alerts\n * - Cache Module: Implements caching strategy to reduce API calls and improve performance\n *   • In-memory cache with configurable TTL (FRED: 1hr, EIA: 10min, Weather: 15min, Insights: 30min)\n *   • SHA-1 hash-based cache invalidation for intelligent updates\n * - Insight Module: Processes raw data to generate analytics, trends, and business insights\n *   • fetchInsight.ts: Claude AI analysis for operational recommendations\n *   • Smart caching prevents redundant AI calls for unchanged data\n * \n * DATA FLOW:\n * 1. Client Request → API endpoint (/pages/api/dashboard.ts)\n * 2. Check Cache Module → Return cached data if valid and available\n * 3. If cache miss → Data Fetch Module retrieves fresh data from sources\n *    • Concurrent API calls to FRED, EIA, and OpenWeatherMap\n *    • Promise.allSettled() ensures partial failures don't break the system\n * 4. Raw data → Insight Module for processing and analysis\n *    • Generate SHA-1 hash from combined data for change detection\n *    • Call Claude AI only if data hash changed or manual refresh requested\n * 5. Processed data → Cache Module for storage with TTL\n * 6. Final response → Client with structured dashboard data\n * \n * RESPONSE FORMAT:\n * {\n *   \"data\": {\n *     \"production\": { \"index\": 102.5, \"trend\": \"↑ 2.1% MoM\" },\n *     \"energy\": { \"centsPerKwh\": 12.8, \"trend\": \"up\" },\n *     \"weather\": { \"temp\": 95, \"alert\": \"none\" },\n *     \"insight\": {\n *       \"summary\": \"Production strong, energy costs rising\",\n *       \"recommendation\": \"Consider energy optimization strategies\"\n *     }\n *   },\n *   \"lastFetched\": \"2024-01-15T10:30:00Z\",\n *   \"lastInsightRun\": \"2024-01-15T09:45:00Z\"\n * }\n * \n * ERROR HANDLING:\n * - Individual API failures are handled gracefully with fallback data\n * - Claude AI failures fall back to cached insights or contextual defaults\n * - Always returns HTTP 200 with complete response structure\n * - Detailed error logging for monitoring and debugging\n * - Rate limit handling with appropriate retry strategies\n * \n * PERFORMANCE:\n * - Data caching: Variable TTL (FRED: 1hr, EIA: 10min, Weather: 15min)\n * - Insight caching: 30 minutes TTL for Claude AI responses\n * - Concurrent API calls reduce total response time\n * - SHA-1 hash comparison prevents unnecessary Claude API calls\n * - Manual refresh option via ?refresh=true query parameter\n * - Rate limits: Respects external API limits with caching and fallbacks\n */ \n\n\n\n\n// Simple in-memory cache for dashboard data\nclass DashboardCache {\n    setData(key, data, ttl) {\n        const now = new Date().toISOString();\n        this.dataCache.set(key, {\n            data,\n            lastFetched: now,\n            expires: Date.now() + ttl\n        });\n    }\n    getData(key) {\n        const item = this.dataCache.get(key);\n        if (!item || Date.now() > item.expires) {\n            this.dataCache.delete(key);\n            return null;\n        }\n        return item;\n    }\n    setInsight(dataHash, insight) {\n        const now = new Date().toISOString();\n        this.insightCache.set(dataHash, {\n            insight,\n            dataHash,\n            lastInsightRun: now,\n            expires: Date.now() + this.INSIGHT_TTL\n        });\n    }\n    getInsight(dataHash) {\n        const item = this.insightCache.get(dataHash);\n        if (!item || Date.now() > item.expires) {\n            this.insightCache.delete(dataHash);\n            return null;\n        }\n        return item;\n    }\n    getLatestInsight() {\n        let latest = null;\n        let latestTime = 0;\n        for (const entry of this.insightCache.values()){\n            const entryTime = new Date(entry.lastInsightRun).getTime();\n            if (entryTime > latestTime) {\n                latest = entry;\n                latestTime = entryTime;\n            }\n        }\n        return latest;\n    }\n    getTTL(source) {\n        switch(source){\n            case \"fred\":\n                return this.FRED_TTL;\n            case \"eia\":\n                return this.EIA_TTL;\n            case \"weather\":\n                return this.WEATHER_TTL;\n            default:\n                return this.EIA_TTL;\n        }\n    }\n    constructor(){\n        this.dataCache = new Map();\n        this.insightCache = new Map();\n        this.FRED_TTL = 60 * 60 * 1000 // 1 hour\n        ;\n        this.EIA_TTL = 10 * 60 * 1000 // 10 minutes\n        ;\n        this.WEATHER_TTL = 15 * 60 * 1000 // 15 minutes\n        ;\n        this.INSIGHT_TTL = 30 * 60 * 1000 // 30 minutes\n        ;\n    }\n}\nconst cache = new DashboardCache();\n/**\n * Generates SHA-1 hash from combined data for cache invalidation\n */ function generateDataHash(production, energy, weather) {\n    const combinedData = {\n        production: {\n            index: Math.round(production.index * 10) / 10,\n            trend: production.trend\n        },\n        energy: {\n            centsPerKwh: Math.round(energy.centsPerKwh * 100) / 100,\n            trend: energy.trend\n        },\n        weather: {\n            temp: Math.round(weather.temp / 5) * 5,\n            alert: weather.alert\n        }\n    };\n    const dataString = JSON.stringify(combinedData, Object.keys(combinedData).sort());\n    return crypto__WEBPACK_IMPORTED_MODULE_0___default().createHash(\"sha1\").update(dataString).digest(\"hex\");\n}\n/**\n * Fetches data from a specific source with caching and error handling\n */ async function fetchWithCache(source, fetchFn, fallback) {\n    // Check cache first\n    const cached = cache.getData(source);\n    if (cached) {\n        return {\n            data: cached.data,\n            lastFetched: cached.lastFetched\n        };\n    }\n    // Fetch fresh data\n    try {\n        const data = await fetchFn();\n        const ttl = cache.getTTL(source);\n        cache.setData(source, data, ttl);\n        const cachedEntry = cache.getData(source);\n        return {\n            data,\n            lastFetched: cachedEntry?.lastFetched || new Date().toISOString()\n        };\n    } catch (error) {\n        console.error(`Error fetching ${source} data:`, error);\n        // Return fallback data\n        return {\n            data: fallback,\n            lastFetched: new Date().toISOString()\n        };\n    }\n}\n/**\n * Fetches data from all sources with individual caching and error handling\n */ async function fetchAllData() {\n    // Fetch all data sources concurrently with individual caching\n    const [productionResult, energyResult, weatherResult] = await Promise.allSettled([\n        fetchWithCache(\"fred\", _src_lib_fetchFred__WEBPACK_IMPORTED_MODULE_1__.getProductionIndex, {\n            index: 102.4,\n            trend: \"→ Data unavailable\"\n        }),\n        fetchWithCache(\"eia\", _src_lib_fetchEia__WEBPACK_IMPORTED_MODULE_2__.getEnergyPrice, {\n            centsPerKwh: 12.5,\n            trend: \"stable\"\n        }),\n        fetchWithCache(\"weather\", _src_lib_fetchWeather__WEBPACK_IMPORTED_MODULE_3__.getLocalWeather, {\n            temp: 75,\n            alert: \"Weather data unavailable\"\n        })\n    ]);\n    // Extract data with fallbacks\n    const production = productionResult.status === \"fulfilled\" ? productionResult.value.data : {\n        index: 102.4,\n        trend: \"→ Data unavailable\"\n    };\n    const energy = energyResult.status === \"fulfilled\" ? energyResult.value.data : {\n        centsPerKwh: 12.5,\n        trend: \"stable\"\n    };\n    const weather = weatherResult.status === \"fulfilled\" ? weatherResult.value.data : {\n        temp: 75,\n        alert: \"Weather data unavailable\"\n    };\n    // Get the most recent lastFetched timestamp\n    const timestamps = [\n        productionResult.status === \"fulfilled\" ? productionResult.value.lastFetched : null,\n        energyResult.status === \"fulfilled\" ? energyResult.value.lastFetched : null,\n        weatherResult.status === \"fulfilled\" ? weatherResult.value.lastFetched : null\n    ].filter(Boolean);\n    const lastFetched = timestamps.length > 0 ? new Date(Math.max(...timestamps.map((t)=>new Date(t).getTime()))).toISOString() : new Date().toISOString();\n    // Log any failures for debugging\n    if (productionResult.status === \"rejected\") {\n        console.error(\"Production data fetch failed:\", productionResult.reason);\n    }\n    if (energyResult.status === \"rejected\") {\n        console.error(\"Energy data fetch failed:\", energyResult.reason);\n    }\n    if (weatherResult.status === \"rejected\") {\n        console.error(\"Weather data fetch failed:\", weatherResult.reason);\n    }\n    return {\n        production,\n        energy,\n        weather,\n        lastFetched\n    };\n}\n/**\n * Main dashboard API handler\n */ async function handler(req, res) {\n    try {\n        const isManualRefresh = req.query.refresh === \"true\";\n        // Fetch all data sources\n        const { production, energy, weather, lastFetched } = await fetchAllData();\n        // Generate hash for change detection\n        const currentDataHash = generateDataHash(production, energy, weather);\n        // Check if we need new insights (data changed or manual refresh)\n        const cachedInsight = cache.getInsight(currentDataHash);\n        const needsInsightUpdate = isManualRefresh || !cachedInsight;\n        let insight;\n        let lastInsightRun = null;\n        if (needsInsightUpdate) {\n            console.log(\"Generating new insights with Claude AI...\");\n            try {\n                insight = await (0,_src_lib_fetchInsight__WEBPACK_IMPORTED_MODULE_4__.analyzeInsight)({\n                    production,\n                    energy,\n                    weather\n                });\n                cache.setInsight(currentDataHash, insight);\n                const newCachedInsight = cache.getInsight(currentDataHash);\n                lastInsightRun = newCachedInsight?.lastInsightRun || new Date().toISOString();\n            } catch (error) {\n                console.error(\"Claude insight generation failed:\", error);\n                // Try to use any available cached insight\n                const latestInsight = cache.getLatestInsight();\n                if (latestInsight) {\n                    insight = latestInsight.insight;\n                    lastInsightRun = latestInsight.lastInsightRun;\n                } else {\n                    // Generate contextual fallback based on data patterns\n                    insight = generateFallbackInsight(production, energy, weather);\n                    lastInsightRun = null;\n                }\n            }\n        } else {\n            // Use cached insight\n            insight = cachedInsight.insight;\n            lastInsightRun = cachedInsight.lastInsightRun;\n        }\n        // Construct response data\n        const dashboardData = {\n            production,\n            energy,\n            weather,\n            insight\n        };\n        const response = {\n            data: dashboardData,\n            lastFetched,\n            lastInsightRun\n        };\n        res.status(200).json(response);\n    } catch (error) {\n        console.error(\"Dashboard API error:\", error);\n        // Return fallback response with proper metadata\n        const fallbackResponse = {\n            data: {\n                production: {\n                    index: 102.4,\n                    trend: \"→ Data unavailable\"\n                },\n                energy: {\n                    centsPerKwh: 12.5,\n                    trend: \"stable\"\n                },\n                weather: {\n                    temp: 75,\n                    alert: \"Data unavailable\"\n                },\n                insight: {\n                    summary: \"System temporarily unavailable\",\n                    recommendation: \"Please try refreshing in a few minutes\"\n                }\n            },\n            lastFetched: new Date().toISOString(),\n            lastInsightRun: null\n        };\n        res.status(200).json(fallbackResponse);\n    }\n}\n/**\n * Generates contextual fallback insights based on data patterns\n */ function generateFallbackInsight(production, energy, weather) {\n    let summary = \"Data analysis temporarily unavailable\";\n    let recommendation = \"Monitor key metrics and adjust operations as needed\";\n    // Provide basic insights based on data patterns\n    if (weather.temp >= 100) {\n        summary = \"Extreme heat conditions detected\";\n        recommendation = \"Consider shifting operations to cooler hours to reduce energy costs\";\n    } else if (energy.trend === \"up\") {\n        summary = \"Energy costs trending upward\";\n        recommendation = \"Optimize energy usage and consider off-peak scheduling\";\n    } else if (weather.alert !== \"none\" && weather.alert !== \"Weather data unavailable\") {\n        summary = \"Weather alert active\";\n        recommendation = \"Monitor weather conditions and prepare contingency plans\";\n    } else if (production.trend.includes(\"↓\")) {\n        summary = \"Production index declining\";\n        recommendation = \"Review production processes and identify improvement opportunities\";\n    } else if (production.trend.includes(\"↑\")) {\n        summary = \"Production performing well\";\n        recommendation = \"Maintain current efficiency while monitoring energy costs\";\n    }\n    return {\n        summary,\n        recommendation\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/dashboard.ts\n");

/***/ }),

/***/ "(api)/./src/lib/fetchEia.ts":
/*!*****************************!*\
  !*** ./src/lib/fetchEia.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clearEnergyPriceCache: () => (/* binding */ clearEnergyPriceCache),\n/* harmony export */   getEnergyPrice: () => (/* binding */ getEnergyPrice)\n/* harmony export */ });\n// Simple in-memory cache with TTL\nclass SimpleCache {\n    set(key, data, ttlMs) {\n        this.cache.set(key, {\n            data,\n            expires: Date.now() + ttlMs\n        });\n    }\n    get(key) {\n        const item = this.cache.get(key);\n        if (!item) return null;\n        if (Date.now() > item.expires) {\n            this.cache.delete(key);\n            return null;\n        }\n        return item.data;\n    }\n    constructor(){\n        this.cache = new Map();\n    }\n}\nconst cache = new SimpleCache();\nconst CACHE_TTL = 10 * 60 * 1000; // 10 minutes in milliseconds\nconst CACHE_KEY = \"eia_texas_electricity_price\";\n/**\n * Fetches current Texas retail electricity pricing data from the EIA API\n * \n * @returns Promise<EnergyPriceData> Object containing current price in cents per kWh and trend\n * @throws Error when API key is missing or API request fails\n * \n * @example\n * ```typescript\n * const energyData = await getEnergyPrice();\n * console.log(`Current price: ${energyData.centsPerKwh}¢/kWh, Trend: ${energyData.trend}`);\n * ```\n */ async function getEnergyPrice() {\n    // Check cache first\n    const cachedData = cache.get(CACHE_KEY);\n    if (cachedData) {\n        return cachedData;\n    }\n    const apiKey = process.env.EIA_API_KEY;\n    if (!apiKey) {\n        throw new Error(\"EIA_API_KEY environment variable is required\");\n    }\n    try {\n        // EIA API endpoint for Texas retail electricity prices\n        // Series ID: ELEC.PRICE.TX-RES.M (Texas residential retail electricity price)\n        const url = \"https://api.eia.gov/v2/electricity/retail-sales/data/\";\n        const params = new URLSearchParams({\n            \"api_key\": apiKey,\n            \"frequency\": \"monthly\",\n            \"data[0]\": \"price\",\n            \"facets[stateid][]\": \"TX\",\n            \"facets[sectorid][]\": \"RES\",\n            \"sort[0][column]\": \"period\",\n            \"sort[0][direction]\": \"desc\",\n            \"offset\": \"0\",\n            \"length\": \"3\" // Get last 3 months for trend calculation\n        });\n        const response = await fetch(`${url}?${params}`, {\n            method: \"GET\",\n            headers: {\n                \"Accept\": \"application/json\",\n                \"User-Agent\": \"OpsIntel-Dashboard/1.0\"\n            }\n        });\n        if (!response.ok) {\n            if (response.status === 429) {\n                throw new Error(\"EIA API rate limit exceeded. Please try again later.\");\n            }\n            if (response.status === 403) {\n                throw new Error(\"Invalid EIA API key or access denied\");\n            }\n            throw new Error(`EIA API error: ${response.status} ${response.statusText}`);\n        }\n        const data = await response.json();\n        if (!data.response?.data || data.response.data.length === 0) {\n            throw new Error(\"No electricity pricing data available from EIA API\");\n        }\n        const priceData = data.response.data[0]?.data;\n        if (!priceData || priceData.length === 0) {\n            throw new Error(\"No valid pricing observations found\");\n        }\n        // Sort by period to ensure we have the most recent data first\n        const sortedData = priceData.filter((point)=>point.value !== null && !isNaN(point.value)).sort((a, b)=>b.period.localeCompare(a.period));\n        if (sortedData.length === 0) {\n            throw new Error(\"No valid pricing data points available\");\n        }\n        const latestPrice = sortedData[0].value;\n        if (isNaN(latestPrice) || latestPrice <= 0) {\n            throw new Error(\"Invalid electricity price value received\");\n        }\n        let trend = \"stable\";\n        // Calculate trend if we have at least 2 data points\n        if (sortedData.length >= 2) {\n            const previousPrice = sortedData[1].value;\n            if (!isNaN(previousPrice) && previousPrice > 0) {\n                const percentChange = (latestPrice - previousPrice) / previousPrice * 100;\n                // Consider changes > 2% as significant trend\n                if (percentChange > 2) {\n                    trend = \"up\";\n                } else if (percentChange < -2) {\n                    trend = \"down\";\n                } else {\n                    trend = \"stable\";\n                }\n            }\n        }\n        const result = {\n            centsPerKwh: Math.round(latestPrice * 100) / 100,\n            trend\n        };\n        // Cache the result\n        cache.set(CACHE_KEY, result, CACHE_TTL);\n        return result;\n    } catch (error) {\n        console.error(\"Error fetching EIA electricity pricing data:\", error);\n        // Return fallback data in case of error\n        return {\n            centsPerKwh: 12.5,\n            trend: \"stable\"\n        };\n    }\n}\n/**\n * Utility function to clear the energy price cache\n * Useful for testing or forcing fresh data retrieval\n */ function clearEnergyPriceCache() {\n    cache.get(CACHE_KEY) && cache.set(CACHE_KEY, null, 0);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/lib/fetchEia.ts\n");

/***/ }),

/***/ "(api)/./src/lib/fetchFred.ts":
/*!******************************!*\
  !*** ./src/lib/fetchFred.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getProductionIndex: () => (/* binding */ getProductionIndex)\n/* harmony export */ });\n// Simple in-memory cache with TTL\nclass SimpleCache {\n    set(key, data, ttlMs) {\n        this.cache.set(key, {\n            data,\n            expires: Date.now() + ttlMs\n        });\n    }\n    get(key) {\n        const item = this.cache.get(key);\n        if (!item) return null;\n        if (Date.now() > item.expires) {\n            this.cache.delete(key);\n            return null;\n        }\n        return item.data;\n    }\n    constructor(){\n        this.cache = new Map();\n    }\n}\nconst cache = new SimpleCache();\nconst CACHE_TTL = 60 * 60 * 1000; // 1 hour in milliseconds\nconst CACHE_KEY = \"fred_production_index\";\nasync function getProductionIndex() {\n    // Check cache first\n    const cachedData = cache.get(CACHE_KEY);\n    if (cachedData) {\n        return cachedData;\n    }\n    const apiKey = process.env.FRED_API_KEY;\n    if (!apiKey) {\n        throw new Error(\"FRED_API_KEY environment variable is required\");\n    }\n    try {\n        // Fetch last 3 months of data to calculate MoM trend\n        const url = `https://api.stlouisfed.org/fred/series/observations`;\n        const params = new URLSearchParams({\n            series_id: \"INDPRO\",\n            api_key: apiKey,\n            file_type: \"json\",\n            limit: \"3\",\n            sort_order: \"desc\",\n            observation_start: new Date(Date.now() - 90 * 24 * 60 * 60 * 1000).toISOString().split(\"T\")[0]\n        });\n        const response = await fetch(`${url}?${params}`);\n        if (!response.ok) {\n            throw new Error(`FRED API error: ${response.status} ${response.statusText}`);\n        }\n        const data = await response.json();\n        if (!data.observations || data.observations.length === 0) {\n            throw new Error(\"No production data available from FRED API\");\n        }\n        // Filter out any observations with \".\" (missing data)\n        const validObservations = data.observations.filter((obs)=>obs.value !== \".\").sort((a, b)=>new Date(b.date).getTime() - new Date(a.date).getTime());\n        if (validObservations.length < 1) {\n            throw new Error(\"No valid production data available\");\n        }\n        const latestValue = parseFloat(validObservations[0].value);\n        if (isNaN(latestValue)) {\n            throw new Error(\"Invalid production index value received\");\n        }\n        let trend = \"→ No data\";\n        // Calculate MoM trend if we have at least 2 data points\n        if (validObservations.length >= 2) {\n            const previousValue = parseFloat(validObservations[1].value);\n            if (!isNaN(previousValue) && previousValue !== 0) {\n                const percentChange = (latestValue - previousValue) / previousValue * 100;\n                const sign = percentChange > 0 ? \"↑\" : percentChange < 0 ? \"↓\" : \"→\";\n                trend = `${sign} ${Math.abs(percentChange).toFixed(1)}% MoM`;\n            }\n        }\n        const result = {\n            index: Math.round(latestValue * 10) / 10,\n            trend\n        };\n        // Cache the result\n        cache.set(CACHE_KEY, result, CACHE_TTL);\n        return result;\n    } catch (error) {\n        console.error(\"Error fetching FRED production data:\", error);\n        // Return fallback data in case of error\n        return {\n            index: 102.4,\n            trend: \"→ Data unavailable\"\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/lib/fetchFred.ts\n");

/***/ }),

/***/ "(api)/./src/lib/fetchInsight.ts":
/*!*********************************!*\
  !*** ./src/lib/fetchInsight.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   analyzeInsight: () => (/* binding */ analyzeInsight),\n/* harmony export */   clearInsightCache: () => (/* binding */ clearInsightCache),\n/* harmony export */   getInsightCacheStats: () => (/* binding */ getInsightCacheStats)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);\n\n// Simple in-memory cache with TTL\nclass InsightCache {\n    set(key, data) {\n        this.cache.set(key, {\n            data,\n            expires: Date.now() + this.CACHE_TTL\n        });\n    }\n    get(key) {\n        const item = this.cache.get(key);\n        if (!item) return null;\n        if (Date.now() > item.expires) {\n            this.cache.delete(key);\n            return null;\n        }\n        return item.data;\n    }\n    clear() {\n        this.cache.clear();\n    }\n    constructor(){\n        this.cache = new Map();\n        this.CACHE_TTL = 30 * 60 * 1000 // 30 minutes in milliseconds\n        ;\n    }\n}\nconst cache = new InsightCache();\n/**\n * Generates a consistent hash key from input data for caching purposes\n */ function generateDataHash(data) {\n    // Create a normalized representation of the data for consistent hashing\n    const normalizedData = {\n        production: {\n            index: Math.round(data.production.index * 10) / 10,\n            trend: data.production.trend\n        },\n        energy: {\n            centsPerKwh: Math.round(data.energy.centsPerKwh * 100) / 100,\n            trend: data.energy.trend\n        },\n        weather: {\n            temp: Math.round(data.weather.temp / 5) * 5,\n            alert: data.weather.alert\n        }\n    };\n    const dataString = JSON.stringify(normalizedData, Object.keys(normalizedData).sort());\n    return crypto__WEBPACK_IMPORTED_MODULE_0___default().createHash(\"md5\").update(dataString).digest(\"hex\");\n}\n/**\n * Validates that the input data contains all required properties\n */ function validateInputData(data) {\n    if (!data || typeof data !== \"object\") {\n        return false;\n    }\n    const { production, energy, weather } = data;\n    // Validate production data\n    if (!production || typeof production.index !== \"number\" || typeof production.trend !== \"string\") {\n        return false;\n    }\n    // Validate energy data\n    if (!energy || typeof energy.centsPerKwh !== \"number\" || ![\n        \"up\",\n        \"down\",\n        \"stable\"\n    ].includes(energy.trend)) {\n        return false;\n    }\n    // Validate weather data\n    if (!weather || typeof weather.temp !== \"number\" || typeof weather.alert !== \"string\") {\n        return false;\n    }\n    return true;\n}\n/**\n * Parses Claude's response and validates the JSON structure\n */ function parseClaudeResponse(responseText) {\n    try {\n        // Try to extract JSON from the response\n        let jsonMatch = responseText.match(/\\{[\\s\\S]*\\}/);\n        if (!jsonMatch) {\n            // If no JSON found, try to parse the entire response\n            jsonMatch = [\n                responseText\n            ];\n        }\n        const parsed = JSON.parse(jsonMatch[0]);\n        // Validate the response structure\n        if (typeof parsed.summary === \"string\" && typeof parsed.recommendation === \"string\") {\n            return {\n                summary: parsed.summary.trim().substring(0, 200),\n                recommendation: parsed.recommendation.trim().substring(0, 300) // Limit length\n            };\n        }\n        return null;\n    } catch (error) {\n        console.error(\"Error parsing Claude response:\", error);\n        return null;\n    }\n}\n/**\n * Analyzes operational data using Claude AI to generate insights and recommendations\n * \n * @param data Object containing production, energy, and weather data\n * @returns Promise resolving to insight summary and recommendation\n * \n * @example\n * ```typescript\n * const insight = await analyzeInsight({\n *   production: { index: 102.5, trend: \"↑ 2.1% MoM\" },\n *   energy: { centsPerKwh: 12.8, trend: \"up\" },\n *   weather: { temp: 95, alert: \"none\" }\n * });\n * console.log(insight.summary); // \"Production strong, energy costs rising\"\n * console.log(insight.recommendation); // \"Consider energy optimization strategies\"\n * ```\n */ async function analyzeInsight(data) {\n    // Validate input data\n    if (!validateInputData(data)) {\n        console.error(\"Invalid input data provided to analyzeInsight\");\n        return {\n            summary: \"Invalid data provided for analysis.\",\n            recommendation: \"Please ensure all required data fields are present and valid.\"\n        };\n    }\n    // Generate cache key\n    const dataHash = generateDataHash(data);\n    // Check cache first\n    const cachedInsight = cache.get(dataHash);\n    if (cachedInsight) {\n        return cachedInsight;\n    }\n    try {\n        const claudeApiKey = process.env.CLAUDE_API_KEY;\n        if (!claudeApiKey) {\n            throw new Error(\"CLAUDE_API_KEY environment variable is required\");\n        }\n        // Construct the prompt for Claude\n        const systemMessage = \"You are an operations advisor for manufacturing facilities. Analyze the provided operational data and respond with a JSON object containing exactly two keys: 'summary' and 'recommendation'. Keep responses concise and actionable.\";\n        const userMessage = `Analyze this manufacturing operations data for El Paso, TX:\n\nProduction Index: ${data.production.index} (${data.production.trend})\nEnergy Cost: ${data.energy.centsPerKwh}¢/kWh (trend: ${data.energy.trend})\nWeather: ${data.weather.temp}°F (alert: ${data.weather.alert})\n\nRespond with JSON format:\n{\n  \"summary\": \"Brief analysis of current conditions (max 25 words)\",\n  \"recommendation\": \"Specific actionable advice for operations (max 35 words)\"\n}\n\nFocus on cost optimization, production efficiency, and weather-related operational adjustments.`;\n        const messages = [\n            {\n                role: \"user\",\n                content: `${systemMessage}\\n\\n${userMessage}`\n            }\n        ];\n        const response = await fetch(\"https://api.anthropic.com/v1/messages\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"x-api-key\": claudeApiKey,\n                \"anthropic-version\": \"2023-06-01\"\n            },\n            body: JSON.stringify({\n                model: \"claude-3-sonnet-20240229\",\n                max_tokens: 300,\n                messages: messages,\n                temperature: 0.3 // Lower temperature for more consistent responses\n            }),\n            signal: AbortSignal.timeout(20000) // 20 second timeout\n        });\n        if (!response.ok) {\n            if (response.status === 401) {\n                throw new Error(\"Invalid Claude API key\");\n            }\n            if (response.status === 429) {\n                throw new Error(\"Claude API rate limit exceeded\");\n            }\n            throw new Error(`Claude API error: ${response.status} ${response.statusText}`);\n        }\n        const result = await response.json();\n        const content = result.content?.[0]?.text || \"\";\n        // Parse and validate the response\n        const parsedInsight = parseClaudeResponse(content);\n        if (parsedInsight) {\n            // Cache the successful result\n            cache.set(dataHash, parsedInsight);\n            return parsedInsight;\n        } else {\n            throw new Error(\"Invalid response format from Claude API\");\n        }\n    } catch (error) {\n        console.error(\"Error calling Claude API:\", error);\n        // Try to return cached insight from any previous successful call\n        const anyCachedInsight = Array.from(cache[\"cache\"].values())[0]?.data;\n        if (anyCachedInsight) {\n            return anyCachedInsight;\n        }\n        // Generate contextual fallback based on the data patterns\n        let summary = \"Data analysis temporarily unavailable\";\n        let recommendation = \"Monitor key metrics and adjust operations as needed\";\n        // Provide basic insights based on data patterns\n        if (data.weather.temp >= 100) {\n            summary = \"Extreme heat conditions detected\";\n            recommendation = \"Consider shifting operations to cooler hours to reduce energy costs\";\n        } else if (data.energy.trend === \"up\") {\n            summary = \"Energy costs trending upward\";\n            recommendation = \"Optimize energy usage and consider off-peak scheduling\";\n        } else if (data.weather.alert !== \"none\") {\n            summary = \"Weather alert active\";\n            recommendation = \"Monitor weather conditions and prepare contingency plans\";\n        } else if (data.production.trend.includes(\"↓\")) {\n            summary = \"Production index declining\";\n            recommendation = \"Review production processes and identify improvement opportunities\";\n        } else if (data.production.trend.includes(\"↑\")) {\n            summary = \"Production performing well\";\n            recommendation = \"Maintain current efficiency while monitoring energy costs\";\n        }\n        return {\n            summary,\n            recommendation\n        };\n    }\n}\n/**\n * Utility function to clear the insight cache\n * Useful for testing or forcing fresh analysis\n */ function clearInsightCache() {\n    cache.clear();\n}\n/**\n * Utility function to get cache statistics\n * Returns information about cached insights\n */ function getInsightCacheStats() {\n    return {\n        totalCached: cache[\"cache\"].size\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/lib/fetchInsight.ts\n");

/***/ }),

/***/ "(api)/./src/lib/fetchWeather.ts":
/*!*********************************!*\
  !*** ./src/lib/fetchWeather.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clearWeatherCache: () => (/* binding */ clearWeatherCache),\n/* harmony export */   getLocalWeather: () => (/* binding */ getLocalWeather),\n/* harmony export */   getWeatherCacheStatus: () => (/* binding */ getWeatherCacheStatus)\n/* harmony export */ });\n// Simple in-memory cache with TTL\nclass SimpleCache {\n    set(key, data, ttlMs) {\n        this.cache.set(key, {\n            data,\n            expires: Date.now() + ttlMs\n        });\n    }\n    get(key) {\n        const item = this.cache.get(key);\n        if (!item) return null;\n        if (Date.now() > item.expires) {\n            this.cache.delete(key);\n            return null;\n        }\n        return item.data;\n    }\n    constructor(){\n        this.cache = new Map();\n    }\n}\nconst cache = new SimpleCache();\nconst CACHE_TTL = 15 * 60 * 1000; // 15 minutes in milliseconds\nconst CACHE_KEY = \"el_paso_weather\";\n// El Paso, TX coordinates\nconst EL_PASO_LAT = 31.7619;\nconst EL_PASO_LON = -106.4850;\n/**\n * Fetches current weather data for El Paso, TX from OpenWeatherMap API\n * \n * @returns Promise<WeatherData> Object containing temperature in Fahrenheit and any active weather alerts\n * @throws Error when API key is missing or API request fails\n * \n * @example\n * ```typescript\n * const weather = await getLocalWeather();\n * console.log(`Current temp: ${weather.temp}°F, Alert: ${weather.alert}`);\n * ```\n */ async function getLocalWeather() {\n    // Check cache first\n    const cachedData = cache.get(CACHE_KEY);\n    if (cachedData) {\n        return cachedData;\n    }\n    const apiKey = process.env.WEATHER_API_KEY;\n    if (!apiKey) {\n        throw new Error(\"WEATHER_API_KEY environment variable is required\");\n    }\n    try {\n        // OpenWeatherMap Current Weather API endpoint\n        const url = \"https://api.openweathermap.org/data/2.5/weather\";\n        const params = new URLSearchParams({\n            lat: EL_PASO_LAT.toString(),\n            lon: EL_PASO_LON.toString(),\n            appid: apiKey,\n            units: \"imperial\",\n            lang: \"en\"\n        });\n        const response = await fetch(`${url}?${params}`, {\n            method: \"GET\",\n            headers: {\n                \"Accept\": \"application/json\",\n                \"User-Agent\": \"OpsIntel-Dashboard/1.0\"\n            },\n            // 10 second timeout\n            signal: AbortSignal.timeout(10000)\n        });\n        if (!response.ok) {\n            if (response.status === 401) {\n                throw new Error(\"Invalid OpenWeatherMap API key\");\n            }\n            if (response.status === 429) {\n                throw new Error(\"OpenWeatherMap API rate limit exceeded. Please try again later.\");\n            }\n            if (response.status === 404) {\n                throw new Error(\"Location not found in OpenWeatherMap API\");\n            }\n            throw new Error(`OpenWeatherMap API error: ${response.status} ${response.statusText}`);\n        }\n        const data = await response.json();\n        if (!data.main?.temp) {\n            throw new Error(\"Invalid weather data received from API\");\n        }\n        const temperature = Math.round(data.main.temp);\n        if (isNaN(temperature)) {\n            throw new Error(\"Invalid temperature value received\");\n        }\n        // Check for weather alerts\n        let alertMessage = \"none\";\n        // Check if there are any severe weather conditions\n        if (data.weather && data.weather.length > 0) {\n            const mainWeather = data.weather[0];\n            // Check for severe weather conditions based on weather IDs\n            // OpenWeatherMap weather condition IDs: https://openweathermap.org/weather-conditions\n            const severeWeatherIds = [\n                200,\n                201,\n                202,\n                210,\n                211,\n                212,\n                221,\n                230,\n                231,\n                232,\n                502,\n                503,\n                504,\n                511,\n                522,\n                531,\n                602,\n                622,\n                711,\n                721,\n                731,\n                741,\n                751,\n                761,\n                762,\n                771,\n                781 // Atmospheric conditions\n            ];\n            if (severeWeatherIds.includes(mainWeather.id)) {\n                alertMessage = `${mainWeather.main}: ${mainWeather.description}`;\n            }\n            // Check for extreme temperatures\n            if (temperature >= 100) {\n                alertMessage = \"Extreme heat warning\";\n            } else if (temperature <= 32) {\n                alertMessage = \"Freezing temperature alert\";\n            }\n        }\n        // Additional check for alerts from the API response (if available)\n        if (data.alerts && data.alerts.length > 0) {\n            // Use the first active alert\n            const activeAlert = data.alerts[0];\n            alertMessage = activeAlert.event || activeAlert.description || \"Weather alert active\";\n        }\n        const result = {\n            temp: temperature,\n            alert: alertMessage\n        };\n        // Cache the result\n        cache.set(CACHE_KEY, result, CACHE_TTL);\n        return result;\n    } catch (error) {\n        console.error(\"Error fetching weather data:\", error);\n        // Return fallback data in case of error\n        return {\n            temp: 75,\n            alert: \"Weather data unavailable\"\n        };\n    }\n}\n/**\n * Utility function to clear the weather cache\n * Useful for testing or forcing fresh data retrieval\n */ function clearWeatherCache() {\n    cache.get(CACHE_KEY) && cache.set(CACHE_KEY, null, 0);\n}\n/**\n * Utility function to get cache status\n * Returns whether cached data exists and when it expires\n */ function getWeatherCacheStatus() {\n    const item = cache.get(CACHE_KEY);\n    return {\n        cached: !!item,\n        expiresAt: item ? new Date(Date.now() + CACHE_TTL) : undefined\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/lib/fetchWeather.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendors"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fdashboard&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fdashboard.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();